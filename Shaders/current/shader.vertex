attribute vec2 vec_texturePosition;
attribute vec3 vec_vertexNormal;
attribute vec4 vec_vertexColor;
attribute vec4 vec_vertexPosition;
uniform bool directional;
uniform float alpha;
uniform mat4 mat_cameraMatrix;
uniform mat4 mat_perspectiveMatrix;
uniform vec3 vec_ambientColor;
uniform vec3 vec_directionalColor;
uniform vec3 vec_directionalVector;
varying vec2 vec_textureCoord;
varying vec4 vec_fragmentColor;
varying vec4 vec_lighting;
varying vec4 vec_position;
void main(void){
    vec_position = mat_cameraMatrix * vec_vertexPosition;
    gl_Position = mat_perspectiveMatrix * vec_position;
    gl_PointSize = 500. / length(vec_position.xyz);
    vec_textureCoord = vec_texturePosition;
    vec3 lighting = vec_ambientColor;
    if(directional){
        vec4 transformedNormal = mat_perspectiveMatrix * vec4(vec_vertexNormal, 1.0);
        lighting += vec_directionalColor * max(dot(transformedNormal.xyz, normalize(vec_directionalVector)), 0.0);
    }
    vec_lighting = vec4(lighting, alpha);
    vec_fragmentColor = vec_vertexColor;
}
